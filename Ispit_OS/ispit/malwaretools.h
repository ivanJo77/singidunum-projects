#pragma once
/*
  tools for Malware.
*/

#include "crypt.h"

namespace MalwareTools
{
  //flags for name format.
  enum
  {
    NCF_ALL_LOWER    = 0x0, //All lowercase.
    //NCF_ALL_UPPER   = 0x1, not necessary
    NCF_FIRST_UPPER  = 0x2, //The first character in uppercase and the rest in the lower.
    NCF_ALLOW_SPACES = 0x4 //Allow spaces.
  };

  //The scope of the kernel object.
  enum
  {
    KON_DEFAULT, //Default is no prefix.
    KON_SESSION, //Inside the current session, the Local prefix.
    KON_GLOBAL,  //Global, the Global prefix.
  };
  
  /*
    Init.
  */
  void init(void);

  /*
    Uninit.
  */
  void uninit(void);

  /*
    Name generators.

    IN dwCaseFlags - flags NCF_*.
    OUT pstrName   - name buffer.
    IN bMinChars   - minimum number of characters in the name.
    IN bMaxChars   - maximum number of characters in the name.
  */
  void _GenerateRandomNameW(DWORD dwCaseFlags, LPWSTR pstrName, BYTE bMinChars, BYTE bMaxChars);
  void _GenerateRandomNameA(DWORD dwCaseFlags, LPSTR pstrName, BYTE bMinChars, BYTE bMaxChars);

  /*
    The add-on for _GenerateRandomNameW, which checks whether the name is available in the directory.

    IN dwCaseFlags   - flags NCF_*.
    IN pstrPath      - directory to check.
	OUT pstrName     - the full path of the file, the size of the buffer must be at least MAX_PATH 
					   of native characters including the null character.
    IN pstrExtension - file extension, or NULL.
	IN bMinChars     - minimum number of characters in the name.
	IN bMaxChars	 - maximum number of characters in the name.

    Return           - true - in case successful,
                       false - in a case of errors.
  */
  bool _GenerateRandomFileName(DWORD dwCaseFlags, LPWSTR pstrPath, LPWSTR pstrName, LPWSTR pstrExtension, BYTE bMinChars, BYTE bMaxChars);

  
  /*
    The add-on _GenerateRandomNameW, which checks whether the registry key is free.

    IN dwCaseFlags - flags NCF_*.
    IN hRoot       - root registry path.
    IN pstrPath    - path to check.
    OUT pstrName   - generated name relative to pstrPath.
	IN bMinChars   - minimum number of characters in the name.
	IN bMaxChars   - maximum number of characters in the name.

	Return         - true - in case successful,
					 false - in a case of errors.
  */
  bool _GenerateRandomRegKeyName(DWORD dwCaseFlags, HKEY hRoot, LPWSTR pstrPath, LPWSTR pstrName, BYTE bMinChars, BYTE bMaxChars);
  
  /*
    Getting unique system ID.

    OUT guid - ID of the system.

    Return   - true - in case successful,
               false - in a case of error (pGUID will be filled with zeros).
  */
  bool _getOsGuid(GUID *guid);

  /*
    The generation of a unique name for the object in the form of core GUID.

    IN osGuid          - result from _getOsGuid().
    IN advId1          - additional identifier 1.
    IN advId2          - additional identifier 2.
    OUT buffer         - buffer "CLSID", a minimum of 40 characters. And if (asLocal == true), then 50.
    IN rc4Key          - encryption key (won't change), or NULL.
    IN objectNamespace - element visibility KON_*.
  */
  void _generateKernelObjectName(GUID *osGuid, DWORD advId1, DWORD advId2, LPWSTR buffer, Crypt::RC4KEY *rc4Key, BYTE objectNamespace);
};
